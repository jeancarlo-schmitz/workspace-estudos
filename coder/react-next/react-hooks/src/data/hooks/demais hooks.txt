üîÅ 1. useState
Gerencia estado local em componentes funcionais.

jsx
Copiar
Editar
import React, { useState } from "react";

function Contador() {
  const [contador, setContador] = useState(0);

  return (
    <div>
      <p>Contador: {contador}</p>
      <button onClick={() => setContador(contador + 1)}>Incrementar</button>
    </div>
  );
}
üîÑ 2. useEffect
Executa efeitos colaterais (ex: API, timers, DOM) ap√≥s renderiza√ß√µes.

jsx
Copiar
Editar
import React, { useEffect } from "react";

function Timer() {
  useEffect(() => {
    console.log("Componente montado");
    return () => console.log("Componente desmontado");
  }, []);

  return <p>Veja o console.</p>;
}
üß† 3. useContext
Acessa dados de um contexto global sem prop drilling.

jsx
Copiar
Editar
import React, { useContext } from "react";
import { ThemeContext } from "./ThemeContext";

function Botao() {
  const tema = useContext(ThemeContext);
  return <button style={{ background: tema.background }}>Clique</button>;
}
üì¶ 4. useRef
Cria uma refer√™ncia mut√°vel que persiste entre renderiza√ß√µes (√∫til para acessar DOM).

jsx
Copiar
Editar
import React, { useRef } from "react";

function InputFocus() {
  const inputRef = useRef(null);

  return (
    <>
      <input ref={inputRef} />
      <button onClick={() => inputRef.current.focus()}>Focar</button>
    </>
  );
}
‚ôªÔ∏è 5. useMemo
Memoriza um valor calculado para evitar recomputa√ß√µes desnecess√°rias.

jsx
Copiar
Editar
import React, { useMemo, useState } from "react";

function Fatorial({ num }) {
  const resultado = useMemo(() => {
    console.log("Calculando fatorial...");
    let r = 1;
    for (let i = 2; i <= num; i++) r *= i;
    return r;
  }, [num]);

  return <p>Fatorial de {num}: {resultado}</p>;
}
üßÆ 6. useCallback
Memoriza uma fun√ß√£o para evitar recria√ß√£o desnecess√°ria entre renders.

jsx
Copiar
Editar
import React, { useCallback, useState } from "react";

function Botao() {
  const [cont, setCont] = useState(0);

  const handleClick = useCallback(() => {
    setCont((c) => c + 1);
  }, []);

  return <button onClick={handleClick}>Contar: {cont}</button>;
}
üß© Extras (avan√ßados ou menos comuns)
Hook	Descri√ß√£o
useReducer	Alternativa ao useState para l√≥gica mais complexa (tipo Redux).
useLayoutEffect	Igual ao useEffect, mas dispara antes da pintura do layout.
useImperativeHandle	Controla o que √© exposto via ref em componentes customizados.
useDebugValue	Para mostrar informa√ß√µes no React DevTools.
useId (React 18+)	Gera IDs √∫nicos para acessibilidade/server rendering.